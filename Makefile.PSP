SDK_TOP=/usr/local/psp/devkit
INCDIR=$(SDK_TOP)/include
LIBDIR=$(SDK_TOP)/lib

CXX=psp-g++
BIN2ELF=binary2elf

DEBUGFLAGS =	-g
CXXFLAGS =	$(DEBUGFLAGS) -Wall -fmessage-length=0 -Iinclude -I$(INCDIR) -D_PSP -DPLATFORM_SCREEN_WIDTH=480 -DPLATFORM_SCREEN_HEIGHT=272 -DPLATFORM_MAP_WINDOW_TILES_WIDTH=18 -DPLATFORM_MAP_WINDOW_TILES_HEIGHT=10 -DPLATFORM_INTRO_OPTIONS=3 -DPLATFORM_MODULE_BASED_AUDIO -DPLATFORM_TILE_BASED_RENDERING -DPLATFORM_IMAGE_BASED_TILES -DPLATFORM_IMAGE_SUPPORT -DPLATFORM_SPRITE_SUPPORT -DPLATFORM_COLOR_SUPPORT -DPLATFORM_CURSOR_SUPPORT -DPLATFORM_FADE_SUPPORT -DPLATFORM_LIVE_MAP_SUPPORT -DPLATFORM_BUILTIN_TILESET -DOPTIMIZED_MAP_RENDERING
LDFLAGS =	-L$(LIBDIR) -Wl,-Map,petrobots.map
SOURCES =	petrobots.o Platform.o PlatformPSP.o PT2.3A_replay_cia.o

LIBS =		-lgu -lgum -lm -lwave
LOADLIBES =	$(LIBDIR)/ctrl_stub.a
LOADLIBES +=$(LIBDIR)/display_stub.a
LOADLIBES +=$(LIBDIR)/ge_user_stub.a
LOADLIBES +=$(LIBDIR)/utility_stub.a
LOADLIBES +=$(LIBDIR)/impose_stub.a

OBJECTS=$(SOURCES:.cpp=.o) Tileset.o C64Font.o Faces.o Tiles.o AnimTiles.o Sprites.o Items.o Keys.o Health.o IntroScreen.o GameScreen.o GameOver.o LevelA.o LevelB.o LevelC.o LevelD.o LevelE.o LevelF.o LevelG.o LevelH.o LevelI.o LevelJ.o LevelK.o LevelL.o LevelM.o ModuleSoundFX.o ModuleMetalHeads.o ModuleWin.o ModuleLose.o ModuleMetallicBopAmiga.o ModuleGetPsyched.o ModuleRobotAttack.o ModuleRushinIn.o SoundExplosion.o SoundMedkit.o SoundEMP.o SoundMagnet.o SoundShock.o SoundMove.o SoundPlasma.o SoundPistol.o SoundItemFound.o SoundError.o SoundCycleWeapon.o SoundCycleItem.o SoundDoor.o SoundMenuBeep.o SoundShortBeep.o

EXECUTABLE=petrobots

all: $(SOURCES) $(EXECUTABLE).prx

$(EXECUTABLE).prx: $(OBJECTS)
	$(LINK.cpp) $^ $(LIBS) $(LOADLIBES) -startfiles -o $@

$(EXECUTABLE).elf: $(OBJECTS)
	$(LINK.cpp) $^ $(LIBS) $(LOADLIBES) -zgenelf -o $@

.cpp.o:
	$(CXX) $(CXXFLAGS) -c $< -o $@
Tileset.o: tileset.amiga
	$(BIN2ELF) --PSP -s tileset -e tilesetEnd tileset.amiga Tileset.o
C64Font.o: c64font.psp
	$(BIN2ELF) --PSP -s font -e fontEnd c64font.psp C64Font.o
Faces.o: faces.psp
	$(BIN2ELF) --PSP -s faces -e facesEnd faces.psp Faces.o
Tiles.o: tiles.psp
	$(BIN2ELF) --PSP -s tiles -e tilesEnd tiles.psp Tiles.o
AnimTiles.o: animtiles.psp
	$(BIN2ELF) --PSP -s animTiles -e animTilesEnd animtiles.psp AnimTiles.o
Sprites.o: sprites.psp
	$(BIN2ELF) --PSP -s sprites -e spritesEnd sprites.psp Sprites.o
Items.o: items.psp
	$(BIN2ELF) --PSP -s items -e itemsEnd items.psp Items.o
Keys.o: keys.psp
	$(BIN2ELF) --PSP -s keys -e keysEnd keys.psp Keys.o
Health.o: health.psp
	$(BIN2ELF) --PSP -s health -e healthEnd health.psp Health.o
IntroScreen.o: introscreen.psp
	$(BIN2ELF) --PSP -s introScreen -e introScreenEnd introscreen.psp IntroScreen.o
GameScreen.o: gamescreen.psp
	$(BIN2ELF) --PSP -s gameScreen -e gameScreenEnd gamescreen.psp GameScreen.o
GameOver.o: gameover.psp
	$(BIN2ELF) --PSP -s gameOver -e gameOverEnd gameover.psp GameOver.o
LevelA.o: level-A
	$(BIN2ELF) --PSP -s levelA -e levelAEnd level-A LevelA.o
LevelB.o: level-B
	$(BIN2ELF) --PSP -s levelB -e levelBEnd level-B LevelB.o
LevelC.o: level-C
	$(BIN2ELF) --PSP -s levelC -e levelCEnd level-C LevelC.o
LevelD.o: level-D
	$(BIN2ELF) --PSP -s levelD -e levelDEnd level-D LevelD.o
LevelE.o: level-E
	$(BIN2ELF) --PSP -s levelE -e levelEEnd level-E LevelE.o
LevelF.o: level-F
	$(BIN2ELF) --PSP -s levelF -e levelFEnd level-F LevelF.o
LevelG.o: level-G
	$(BIN2ELF) --PSP -s levelG -e levelGEnd level-G LevelG.o
LevelH.o: level-H
	$(BIN2ELF) --PSP -s levelH -e levelHEnd level-H LevelH.o
LevelI.o: level-I
	$(BIN2ELF) --PSP -s levelI -e levelIEnd level-I LevelI.o
LevelJ.o: level-J
	$(BIN2ELF) --PSP -s levelJ -e levelJEnd level-J LevelJ.o
LevelK.o: level-K
	$(BIN2ELF) --PSP -s levelK -e levelKEnd level-K LevelK.o
LevelL.o: level-L
	$(BIN2ELF) --PSP -s levelL -e levelLEnd level-L LevelL.o
LevelM.o: level-M
	$(BIN2ELF) --PSP -s levelM -e levelMEnd level-M LevelM.o
ModuleSoundFX.o: mod.soundfx
	$(BIN2ELF) --PSP -s moduleSoundFX -e moduleSoundFXEnd mod.soundfx ModuleSoundFX.o
ModuleMetalHeads.o: mod.metal\ heads
	$(BIN2ELF) --PSP -s moduleMetalHeads -e moduleMetalHeadsEnd "mod.metal heads" ModuleMetalHeads.o
ModuleWin.o: mod.win
	$(BIN2ELF) --PSP -s moduleWin -e moduleWinEnd mod.win ModuleWin.o
ModuleLose.o: mod.lose
	$(BIN2ELF) --PSP -s moduleLose -e moduleLoseEnd mod.lose ModuleLose.o
ModuleMetallicBopAmiga.o: mod.metallic\ bop\ amiga
	$(BIN2ELF) --PSP -s moduleMetallicBopAmiga -e moduleMetallicBopAmigaEnd "mod.metallic bop amiga" ModuleMetallicBopAmiga.o
ModuleGetPsyched.o: mod.get\ psyched
	$(BIN2ELF) --PSP -s moduleGetPsyched -e moduleGetPsychedEnd "mod.get psyched" ModuleGetPsyched.o
ModuleRobotAttack.o: mod.robot\ attack
	$(BIN2ELF) --PSP -s moduleRobotAttack -e moduleRobotAttackEnd "mod.robot attack" ModuleRobotAttack.o
ModuleRushinIn.o: mod.rushin\ in
	$(BIN2ELF) --PSP -s moduleRushinIn -e moduleRushinInEnd "mod.rushin in" ModuleRushinIn.o
SoundExplosion.o: sounds_dsbarexp.raw
	$(BIN2ELF) --PSP -s soundExplosion -e soundExplosionEnd sounds_dsbarexp.raw SoundExplosion.o
SoundMedkit.o: SOUND_MEDKIT.raw
	$(BIN2ELF) --PSP -s soundMedkit -e soundMedkitEnd SOUND_MEDKIT.raw SoundMedkit.o
SoundEMP.o: SOUND_EMP.raw
	$(BIN2ELF) --PSP -s soundEMP -e soundEMPEnd SOUND_EMP.raw SoundEMP.o
SoundMagnet.o: SOUND_MAGNET2.raw
	$(BIN2ELF) --PSP -s soundMagnet -e soundMagnetEnd SOUND_MAGNET2.raw SoundMagnet.o
SoundShock.o: SOUND_SHOCK.raw
	$(BIN2ELF) --PSP -s soundShock -e soundShockEnd SOUND_SHOCK.raw SoundShock.o
SoundMove.o: SOUND_MOVE.raw
	$(BIN2ELF) --PSP -s soundMove -e soundMoveEnd SOUND_MOVE.raw SoundMove.o
SoundPlasma.o: SOUND_PLASMA_FASTER.raw
	$(BIN2ELF) --PSP -s soundPlasma -e soundPlasmaEnd SOUND_PLASMA_FASTER.raw SoundPlasma.o
SoundPistol.o: sounds_dspistol.raw
	$(BIN2ELF) --PSP -s soundPistol -e soundPistolEnd sounds_dspistol.raw SoundPistol.o
SoundItemFound.o: SOUND_FOUND_ITEM.raw
	$(BIN2ELF) --PSP -s soundItemFound -e soundItemFoundEnd SOUND_FOUND_ITEM.raw SoundItemFound.o
SoundError.o: SOUND_ERROR.raw
	$(BIN2ELF) --PSP -s soundError -e soundErrorEnd SOUND_ERROR.raw SoundError.o
SoundCycleWeapon.o: SOUND_CYCLE_WEAPON.raw
	$(BIN2ELF) --PSP -s soundCycleWeapon -e soundCycleWeaponEnd SOUND_CYCLE_WEAPON.raw SoundCycleWeapon.o
SoundCycleItem.o: SOUND_CYCLE_ITEM.raw
	$(BIN2ELF) --PSP -s soundCycleItem -e soundCycleItemEnd SOUND_CYCLE_ITEM.raw SoundCycleItem.o
SoundDoor.o: SOUND_DOOR_FASTER.raw
	$(BIN2ELF) --PSP -s soundDoor -e soundDoorEnd SOUND_DOOR_FASTER.raw SoundDoor.o
SoundMenuBeep.o: SOUND_BEEP2.raw
	$(BIN2ELF) --PSP -s soundMenuBeep -e soundMenuBeepEnd SOUND_BEEP2.raw SoundMenuBeep.o
SoundShortBeep.o: SOUND_BEEP.raw
	$(BIN2ELF) --PSP -s soundShortBeep -e soundShortBeepEnd SOUND_BEEP.raw SoundShortBeep.o

clean:
	rm -f $(OBJECTS) *.gcda *.gcno

#----------- rules --------------
-include PathDefs
PathDefs:
	psp-path-setup > PathDefs || (rm -f PathDefs ; exit 1)
